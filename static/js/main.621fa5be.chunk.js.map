{"version":3,"sources":["ethereumLogo.png","../../contracts/src/addresses.js","../../contracts/src/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","addresses","ceaErc20","abis","erc20","erc20Abi","ownable","ownableAbi","GET_TRANSFERS","gql","a","defaultProvider","ethers","getDefaultProvider","Contract","balanceOf","tokenBalance","console","log","toString","App","useQuery","loading","error","data","React","useEffect","transfers","className","src","logo","alt","onClick","readOnchainBalance","style","display","href","target","rel","marginTop","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,0C,u5GCM5BC,EAJG,CAChBC,SAAU,8CCACC,EAAO,CAClBC,MAAOC,EACPC,QAASC,G,uLCGX,IAAMC,EAAgBC,YAAH,K,4CAWnB,gCAAAC,EAAA,6DAEQC,EAAkBC,SAAOC,qBAGzBX,EAAW,IAAIU,SAAOE,SAASb,EAAUC,SAAUC,EAAKC,MAAOO,GALvE,SAO6BT,EAASa,UAAU,8CAPhD,OAOQC,EAPR,OAQEC,QAAQC,IAAI,CAAEF,aAAcA,EAAaG,aAR3C,4C,sBAkDeC,MAvCf,WAAgB,IAAD,EACoBC,YAASb,GAAlCc,EADK,EACLA,QAASC,EADJ,EACIA,MAAOC,EADX,EACWA,KAQxB,OANAC,IAAMC,WAAU,YACTJ,IAAYC,GAASC,GAAQA,EAAKG,WACrCV,QAAQC,IAAI,CAAES,UAAWH,EAAKG,cAE/B,CAACL,EAASC,EAAOC,IAGlB,yBAAKI,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,eACzC,mCACO,+DADP,wBAGA,4BAAQC,QAAS,kB,0CAAMC,IAAsBC,MAAO,CAAEC,QAAS,SAA/D,yBAGA,uBACEP,UAAU,WACVQ,KAAK,mDACLC,OAAO,SACPC,IAAI,sBACJJ,MAAO,CAAEK,UAAW,QALtB,kBASA,uBAAGX,UAAU,WAAWQ,KAAK,sBAAsBC,OAAO,SAASC,IAAI,uBAAvE,eAGA,uBAAGV,UAAU,WAAWQ,KAAK,wCAAwCC,OAAO,SAASC,IAAI,uBAAzF,sBCjDYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCRnC,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,qEAGPC,IAASC,OACP,kBAAC,IAAD,CAAgBJ,OAAQA,GACtB,kBAAC,EAAD,OAEFK,SAASC,eAAe,SD2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.621fa5be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ethereumLogo.0020ce37.png\";","// This address points to a dummy ERC20 contract deployed on Ethereum Mainnet,\n// Goerli, Kovan, Rinkeby and Ropsten. Replace it with your smart contracts.\nconst addresses = {\n  ceaErc20: \"0xc1C0472c0C80bCcDC7F5D01A376Bd97a734B8815\",\n};\n\nexport default addresses;\n","import erc20Abi from \"./abis/erc20\";\nimport ownableAbi from \"./abis/ownable\";\n\nexport const abis = {\n  erc20: erc20Abi,\n  ownable: ownableAbi,\n};\n\nexport { default as addresses } from \"./addresses\";\n","import React from \"react\";\nimport logo from \"./ethereumLogo.png\";\nimport { addresses, abis } from \"@project/contracts\";\nimport { gql } from \"apollo-boost\";\nimport { ethers } from \"ethers\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport \"./App.css\";\n\nconst GET_TRANSFERS = gql`\n  {\n    transfers(first: 10) {\n      id\n      from\n      to\n      value\n    }\n  }\n`;\n\nasync function readOnchainBalance() {\n  // Should replace with the end-user wallet, e.g. Metamask\n  const defaultProvider = ethers.getDefaultProvider();\n  // Create an instance of ethers.Contract\n  // Read more about ethers.js on https://docs.ethers.io/ethers.js/html/api-contract.html\n  const ceaErc20 = new ethers.Contract(addresses.ceaErc20, abis.erc20, defaultProvider);\n  // A pre-defined address that owns some CEAERC20 tokens\n  const tokenBalance = await ceaErc20.balanceOf(\"0x3f8CB69d9c0ED01923F11c829BaE4D9a4CB6c82C\");\n  console.log({ tokenBalance: tokenBalance.toString() });\n}\n\nfunction App() {\n  const { loading, error, data } = useQuery(GET_TRANSFERS);\n\n  React.useEffect(() => {\n    if (!loading && !error && data && data.transfers) {\n      console.log({ transfers: data.transfers });\n    }\n  }, [loading, error, data]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"react-logo\" />\n        <p>\n          Edit <code>packages/react-app/src/App.js</code> and save to reload.\n        </p>\n        <button onClick={() => readOnchainBalance()} style={{ display: \"none\" }}>\n          Read On-Chain Balance\n        </button>\n        <a\n          className=\"App-link\"\n          href=\"https://ethereum.org/developers/#getting-started\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={{ marginTop: \"0px\" }}\n        >\n          Learn Ethereum\n        </a>\n        <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn React\n        </a>\n        <a className=\"App-link\" href=\"https://thegraph.com/docs/quick-start\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn The Graph\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// You should replace this uri with your own and put it into a .env file\nconst client = new ApolloClient({\n  uri: \"https://api.thegraph.com/subgraphs/name/paulrberg/create-eth-app\",\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}