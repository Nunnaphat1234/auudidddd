{"version":3,"sources":["connectors.ts","hooks.ts","components/Spinner.tsx","pages/App.tsx","serviceWorker.js","index.js"],"names":["require","config","injected","InjectedConnector","supportedChainIds","network","NetworkConnector","urls","3","defaultChainId","pollingInterval","portis","PortisConnector","dAppId","networks","Spinner","color","rest","width","height","viewBox","xmlns","stroke","fill","fillRule","transform","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","type","from","to","dur","repeatCount","connectorsByName","Injected","Network","Portis","getLibrary","provider","connector","ethers","providers","Web3Provider","ChainId","chainId","useWeb3React","role","aria-label","Number","isInteger","BlockNumber","library","React","useState","blockNumber","setBlockNumber","useEffect","stale","getBlockNumber","then","catch","updateBlockNumber","on","removeListener","undefined","toLocaleString","Account","account","substring","length","Balance","balance","setBalance","getBalance","parseFloat","toPrecision","Header","active","error","style","margin","textAlign","display","gridGap","gridTemplateColumns","maxWidth","lineHeight","App","context","activate","deactivate","activatingConnector","setActivatingConnector","triedEager","tried","setTried","isAuthorized","useEagerConnect","suppress","ethereum","window","handleConnect","console","log","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","useInactiveListener","Object","keys","map","name","currentConnector","activating","connected","disabled","borderRadius","borderColor","cursor","position","key","onClick","top","left","alignItems","marginLeft","flexDirection","marginTop","marginBottom","NoEthereumProviderError","UnsupportedChainIdError","UserRejectedRequestErrorInjected","getErrorMessage","getSigner","signMessage","signature","alert","message","changeChainId","changeNetwork","close","styled","div","Boolean","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25189d46.chunk.js","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\n// import { WalletConnectConnector } from '@web3-react/walletconnect-connector'\n// import { WalletLinkConnector } from '@web3-react/walletlink-connector'\n// import { LedgerConnector } from '@web3-react/ledger-connector'\n// import { TrezorConnector } from '@web3-react/trezor-connector'\n// import { FrameConnector } from '@web3-react/frame-connector'\n// import { AuthereumConnector } from '@web3-react/authereum-connector'\n// import { FortmaticConnector } from '@web3-react/fortmatic-connector'\nimport { PortisConnector } from '@web3-react/portis-connector'\n// import { SquarelinkConnector } from '@web3-react/squarelink-connector'\n// import { TorusConnector } from '@web3-react/torus-connector'\n\nrequire('dotenv').config();\n\nconst POLLING_INTERVAL = 12000\nconst RPC_URLS: { [chainId: number]: string } = {\n  3: \"https://ropsten.infura.io/v3/084ddf3da9e240c5b5dd9264f37c0526\" as string\n}\n\nexport const injected = new InjectedConnector({ supportedChainIds: [3] })\n\nexport const network = new NetworkConnector({\n  urls: { 3: RPC_URLS[3] },\n  defaultChainId: 3,\n  pollingInterval: POLLING_INTERVAL\n})\n\n// export const walletconnect = new WalletConnectConnector({\n//   rpc: { 1: RPC_URLS[1] },\n//   bridge: 'https://bridge.walletconnect.org',\n//   qrcode: true,\n//   pollingInterval: POLLING_INTERVAL\n// })\n//\n// export const walletlink = new WalletLinkConnector({\n//   url: RPC_URLS[1],\n//   appName: 'web3-react example'\n// })\n//\n// export const ledger = new LedgerConnector({ chainId: 1, url: RPC_URLS[1], pollingInterval: POLLING_INTERVAL })\n//\n// export const trezor = new TrezorConnector({\n//   chainId: 1,\n//   url: RPC_URLS[1],\n//   pollingInterval: POLLING_INTERVAL,\n//   manifestEmail: 'dummy@abc.xyz',\n//   manifestAppUrl: 'http://localhost:1234'\n// })\n//\n// export const frame = new FrameConnector({ supportedChainIds: [1] })\n//\n// export const authereum = new AuthereumConnector({ chainId: 42 })\n//\n// export const fortmatic = new FortmaticConnector({ apiKey: process.env.FORTMATIC_API_KEY as string, chainId: 4 })\n\nexport const portis = new PortisConnector({ dAppId: 'cfefa032-9afd-4833-bfb4-2b0cb7ec3413' as string, networks: [1, 100] })\n\n// export const squarelink = new SquarelinkConnector({\n//   clientId: process.env.SQUARELINK_CLIENT_ID as string,\n//   networks: [1, 100]\n// })\n\n// export const torus = new TorusConnector({ chainId: 1 })\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './connectors'\n\nrequire('dotenv').config();\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\")\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId)\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId)\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}\n","import React from 'react'\n\n// <!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->\nexport function Spinner({ color, ...rest }: any) {\n  return (\n    <svg width=\"38\" height=\"38\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\" stroke={color} {...rest}>\n      <g fill=\"none\" fillRule=\"evenodd\">\n        <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n          <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n          <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n            <animateTransform\n              attributeName=\"transform\"\n              type=\"rotate\"\n              from=\"0 18 18\"\n              to=\"360 18 18\"\n              dur=\"1s\"\n              repeatCount=\"indefinite\"\n            />\n          </path>\n        </g>\n      </g>\n    </svg>\n  )\n}\n","import React from \"react\";\nimport { addresses, abis } from \"@project/contracts\";\n\nimport { ethers } from \"ethers\";\n\nimport styled from 'styled-components';\n\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { Web3ReactProvider, useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { Web3Provider } from 'ethers/providers'\n\nimport { useEagerConnect, useInactiveListener } from 'hooks'\nimport {\n  injected,\n  network,\n  portis\n} from 'connectors'\nimport { Spinner } from '../components/Spinner'\n\nconst connectorsByName: { [name: string]: AbstractConnector } = {\n  Injected: injected,\n  Network: network,\n  Portis: portis\n}\n\nfunction getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return \"You're connected to an unsupported network.\"\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nfunction getLibrary(provider, connector) {\n  return new ethers.providers.Web3Provider(provider); // this will vary according to whether you use e.g. ethers or web3.js\n}\n\nexport default function() {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <App />\n    </Web3ReactProvider>\n  )\n}\n\nfunction ChainId() {\n  const { chainId } = useWeb3React()\n\n  return (\n    <>\n      <span>Chain Id</span>\n      <span role=\"img\" aria-label=\"chain\">\n        ⛓\n      </span>\n      <span>{Number.isInteger(chainId) ? chainId : ''}</span>\n    </>\n  )\n}\n\nfunction BlockNumber() {\n  const { chainId, library } = useWeb3React()\n\n  const [blockNumber, setBlockNumber] = React.useState<number>()\n  React.useEffect((): any => {\n    if (!!library) {\n      let stale = false\n\n      library\n        .getBlockNumber()\n        .then((blockNumber: number) => {\n          if (!stale) {\n            setBlockNumber(blockNumber)\n          }\n        })\n        .catch(() => {\n          if (!stale) {\n            setBlockNumber(null)\n          }\n        })\n\n      const updateBlockNumber = (blockNumber: number) => {\n        setBlockNumber(blockNumber)\n      }\n      library.on('block', updateBlockNumber)\n\n      return () => {\n        stale = true\n        library.removeListener('block', updateBlockNumber)\n        setBlockNumber(undefined)\n      }\n    }\n  }, [library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return (\n    <>\n      <span>Block Number</span>\n      <span role=\"img\" aria-label=\"numbers\">\n        🔢\n      </span>\n      <span>\n        {Number.isInteger(blockNumber)\n          ? blockNumber.toLocaleString()\n          : blockNumber === null\n          ? 'Error'\n          : !!library\n          ? '...'\n          : ''}\n      </span>\n    </>\n  )\n}\n\nfunction Account() {\n  const { account } = useWeb3React()\n\n  return (\n    <>\n      <span>Account</span>\n      <span role=\"img\" aria-label=\"robot\">\n        🤖\n      </span>\n      <span>\n        {account === undefined\n          ? ''\n          : account === null\n          ? '-'\n          : `${account.substring(0, 6)}...${account.substring(account.length - 4)}`}\n      </span>\n    </>\n  )\n}\n\nfunction Balance() {\n  const { account, library, chainId } = useWeb3React()\n\n  const [balance, setBalance] = React.useState()\n  React.useEffect((): any => {\n    if (!!account && !!library) {\n      let stale = false\n\n      library\n        .getBalance(account)\n        .then((balance: any) => {\n          if (!stale) {\n            setBalance(balance)\n          }\n        })\n        .catch(() => {\n          if (!stale) {\n            setBalance(null)\n          }\n        })\n\n      return () => {\n        stale = true\n        setBalance(undefined)\n      }\n    }\n  }, [account, library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return (\n    <>\n      <span>Balance</span>\n      <span role=\"img\" aria-label=\"gold\">\n        💰\n      </span>\n      <span>\n        {!!balance\n          ? `Ξ${parseFloat(balance).toPrecision(4)}`\n          : balance === null\n          ? 'Error'\n          : account === null\n          ? '-'\n          : !!account && !!library\n          ? '...'\n          : ''}\n      </span>\n    </>\n  )\n}\n\nfunction Header() {\n  const { active, error } = useWeb3React()\n\n  return (\n    <>\n      <h1 style={{ margin: '1rem', textAlign: 'right' }}>{active ? '🟢' : error ? '🔴' : '🟠'}</h1>\n      <h3\n        style={{\n          display: 'grid',\n          gridGap: '1rem',\n          gridTemplateColumns: '1fr min-content 1fr',\n          maxWidth: '20rem',\n          lineHeight: '2rem',\n          margin: 'auto'\n        }}\n      >\n        <ChainId />\n        <BlockNumber />\n        <Account />\n        <Balance />\n      </h3>\n    </>\n  )\n}\n\nfunction App() {\n  const context = useWeb3React<Web3Provider>()\n  const { connector, library, chainId, account, activate, deactivate, active, error } = context\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = React.useState<AbstractConnector>()\n  React.useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined)\n    }\n  }, [activatingConnector, connector])\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector)\n\n  return (\n      <>\n        <Header />\n        <hr style={{ margin: '2rem' }} />\n        <div\n          style={{\n            display: 'grid',\n            gridGap: '1rem',\n            gridTemplateColumns: '1fr 1fr',\n            maxWidth: '20rem',\n            margin: 'auto'\n          }}\n        >\n          {Object.keys(connectorsByName).map(name => {\n            const currentConnector = connectorsByName[name]\n            const activating = currentConnector === activatingConnector\n            const connected = currentConnector === connector\n            const disabled = !triedEager || !!activatingConnector || connected || !!error\n\n            return (\n              <button\n                style={{\n                  height: '3rem',\n                  borderRadius: '1rem',\n                  borderColor: activating ? 'orange' : connected ? 'green' : 'unset',\n                  cursor: disabled ? 'unset' : 'pointer',\n                  position: 'relative'\n                }}\n                disabled={disabled}\n                key={name}\n                onClick={() => {\n                  setActivatingConnector(currentConnector)\n                  activate(connectorsByName[name])\n                }}\n              >\n                <div\n                  style={{\n                    position: 'absolute',\n                    top: '0',\n                    left: '0',\n                    height: '100%',\n                    display: 'flex',\n                    alignItems: 'center',\n                    color: 'black',\n                    margin: '0 0 0 1rem'\n                  }}\n                >\n                  {activating && <Spinner color={'black'} style={{ height: '25%', marginLeft: '-1rem' }} />}\n                  {connected && (\n                    <span role=\"img\" aria-label=\"check\">\n                      ✅\n                    </span>\n                  )}\n                </div>\n                {name}\n              </button>\n            )\n          })}\n        </div>\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n          {(active || error) && (\n            <button\n              style={{\n                height: '3rem',\n                marginTop: '2rem',\n                borderRadius: '1rem',\n                borderColor: 'red',\n                cursor: 'pointer'\n              }}\n              onClick={() => {\n                deactivate()\n              }}\n            >\n              Deactivate\n            </button>\n          )}\n\n          {!!error && <h4 style={{ marginTop: '1rem', marginBottom: '0' }}>{getErrorMessage(error)}</h4>}\n        </div>\n\n        <hr style={{ margin: '2rem' }} />\n\n        <div\n          style={{\n            display: 'grid',\n            gridGap: '1rem',\n            gridTemplateColumns: 'fit-content',\n            maxWidth: '20rem',\n            margin: 'auto'\n          }}\n        >\n          {!!(library && account) && (\n            <button\n              style={{\n                height: '3rem',\n                borderRadius: '1rem',\n                cursor: 'pointer'\n              }}\n              onClick={() => {\n                library\n                  .getSigner(account)\n                  .signMessage('👋')\n                  .then((signature: any) => {\n                    window.alert(`Success!\\n\\n${signature}`)\n                  })\n                  .catch((error: any) => {\n                    window.alert('Failure!' + (error && error.message ? `\\n\\n${error.message}` : ''))\n                  })\n              }}\n            >\n              Sign Message\n            </button>\n          )}\n          {!!(connector === network && chainId) && (\n            <button\n              style={{\n                height: '3rem',\n                borderRadius: '1rem',\n                cursor: 'pointer'\n              }}\n              onClick={() => {\n                ;(connector as any).changeChainId(chainId === 1 ? 4 : 1)\n              }}\n            >\n              Switch Networks\n            </button>\n          )}\n          {connector === portis && (\n            <>\n              {chainId !== undefined && (\n                <button\n                  style={{\n                    height: '3rem',\n                    borderRadius: '1rem',\n                    cursor: 'pointer'\n                  }}\n                  onClick={() => {\n                    ;(connector as any).changeNetwork(chainId === 1 ? 100 : 1)\n                  }}\n                >\n                  Switch Networks\n                </button>\n              )}\n              <button\n                style={{\n                  height: '3rem',\n                  borderRadius: '1rem',\n                  cursor: 'pointer'\n                }}\n                onClick={() => {\n                  ;(connector as any).close()\n                }}\n              >\n                Kill Portis Session\n              </button>\n            </>\n          )}\n        </div>\n      </>\n  );\n}\n\n\n// CSS STYLES\nconst Text = styled.div`\n  height: 40vmin;\n  margin-bottom: 16px;\n  pointer-events: none;\n  font-size: 15px;\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nimport App from \"pages/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Web3ReactProvider } from '@web3-react/core'\nimport { ethers } from \"ethers\";\n\nrequire('dotenv').config();\n\n// You should replace this uri with your own and put it into a .env file\nconst client = new ApolloClient({\n  uri: \"https://api.thegraph.com/subgraphs/name/paulrberg/create-eth-app\",\n});\n\nfunction getLibrary(provider, connector) {\n  return new ethers.providers.Web3Provider(provider); // this will vary according to whether you use e.g. ethers or web3.js\n}\n\nReactDOM.render(\n\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>,\n    document.getElementById(\"root\"),\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}